import{h as n,o as d,c as r,a as e,e as a,f as l,F as c,g as t,i as h}from"./app.7a8ebebe.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const _={},p=e("h1",{id:"call-service",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#call-service","aria-hidden":"true"},"#"),t(" Call Service")],-1),f=e("p",null,[t("Sends a request to home assistant for any domain and service available ("),e("code",null,"light/turn_on"),t(", "),e("code",null,"input_select/select_option"),t(", etc..)")],-1),g={class:"custom-container tip"},m=e("p",{class:"custom-container-title"},"Helpful Examples",-1),b={href:"/guide/call-service.html",target:"_blank",rel:"noopener noreferrer"},v=t("Call Service Tips and Tricks"),y=e("h2",{id:"configuration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#"),t(" Configuration")],-1),x={id:"domain",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#domain","aria-hidden":"true"},"#",-1),w=t(" Domain "),T=e("li",null,[t("Type: "),e("code",null,"string")],-1),S=t("Accepts "),k={href:"/guide/mustache-templates.md",target:"_blank",rel:"noopener noreferrer"},A=t("Mustache Templates"),N=e("p",null,"Service domain to call",-1),O=e("p",null,[t("A custom domain can be used by adding a "),e("code",null,"#"),t(" at the end of the domain")],-1),C={id:"service",tabindex:"-1"},M=e("a",{class:"header-anchor",href:"#service","aria-hidden":"true"},"#",-1),J=t(" Service "),D=e("li",null,[t("Type: "),e("code",null,"string")],-1),j=t("Accepts "),I={href:"/guide/mustache-templates.md",target:"_blank",rel:"noopener noreferrer"},E=t("Mustache Templates"),B=e("p",null,"Service to call",-1),V=e("p",null,[t("Custom service can be used by adding a "),e("code",null,"#"),t(" at the end of the service")],-1),F=e("h3",{id:"area",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#area","aria-hidden":"true"},"#"),t(" Area")],-1),H=e("li",null,[t("Type: "),e("code",null,"an array of area ids")],-1),L=t("Accepts "),R={href:"/guide/mustache-templates.md",target:"_blank",rel:"noopener noreferrer"},W=t("Mustache Templates"),G=t(" for ids"),P=e("p",null,"A list of area ids that will be used as targets for the service call",-1),Q=e("p",null,[t("Custom ids can be inserted into the list by adding a "),e("code",null,"#"),t(" at the end of the id")],-1),z=e("h3",{id:"device",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#device","aria-hidden":"true"},"#"),t(" Device")],-1),K=e("li",null,[t("Type: "),e("code",null,"an array of device ids")],-1),U=t("Accepts "),X={href:"/guide/mustache-templates.md",target:"_blank",rel:"noopener noreferrer"},Y=t("Mustache Templates"),Z=t(" for ids"),$=e("p",null,"A list of device ids that will be used as targets for the service call",-1),ee=e("p",null,[t("Custom ids can be inserted into the list by adding a "),e("code",null,"#"),t(" at the end of the id")],-1),te=e("h3",{id:"entity",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#entity","aria-hidden":"true"},"#"),t(" Entity")],-1),ae=e("li",null,[t("Type: "),e("code",null,"an array of entity ids")],-1),oe=t("Accepts "),ne={href:"/guide/mustache-templates.md",target:"_blank",rel:"noopener noreferrer"},ie=t("Mustache Templates"),se=t(" for ids"),de=e("p",null,"A list of entity ids that will be used as targets for the service call",-1),re=e("h3",{id:"data",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#data","aria-hidden":"true"},"#"),t(" Data")],-1),le=e("li",null,[t("Type: "),e("code",null,"JSONata | JSON")],-1),ce=t("Accepts "),he={href:"/guide/mustache-templates.md",target:"_blank",rel:"noopener noreferrer"},ue=t("Mustache Templates"),_e=t(" when data type is JSON"),pe=h(`<p>JSON object to pass along.</p><h3 id="merge-context" tabindex="-1"><a class="header-anchor" href="#merge-context" aria-hidden="true">#</a> Merge Context</h3><ul><li>Type: <code>string</code></li></ul><p>If defined will attempt to merge the global and flow context variable into the config</p><h3 id="alternative-template-tags" tabindex="-1"><a class="header-anchor" href="#alternative-template-tags" aria-hidden="true">#</a> Alternative Template Tags</h3><ul><li>Type: <code>boolean</code></li></ul><p>Will change the tags used for the mustache template to <code>&lt;%</code> and <code>%&gt;</code></p><h3 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> Queue</h3><ul><li>Type: <code>none | first | all | last</code></li></ul><p>Will store the first, last, or all messages received while disconnected from Home Assistant and send them once connected again</p><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h2><p>All properties need to be under <code>msg.payload</code>.</p><p>Sample input</p><div class="language-JSON ext-JSON"><pre class="language-JSON"><code>{
    &quot;domain&quot;: &quot;homeassistant&quot;,
    &quot;service&quot;: &quot;turn_on&quot;,
    &quot;target&quot;: {
        &quot;area_id&quot;: [&quot;kitchen&quot;],
        &quot;device_id&quot;: [&quot;8932894082930482903&quot;],
        &quot;entity_id&quot;: [&quot;light.kitchen&quot;, &quot;switch.garage_light&quot;]
    }
    &quot;data&quot;: {
        &quot;brightness_pct&quot;: 50
    }
}
</code></pre></div><h4 id="merging" tabindex="-1"><a class="header-anchor" href="#merging" aria-hidden="true">#</a> Merging</h4><p>If the incoming message has a <code>payload</code> property with <code>domain</code>, <code>service</code> set it will override any config values if set.</p><p>If the incoming message has a <code>payload.data</code> that is an object or parsable into an object these properties will be <strong>merged</strong> with any config values set.</p><p>If the node has a property value in its config for <code>Merge Context</code> then the <code>flow</code> and <code>global</code> contexts will be checked for this property which should be an object that will also be merged into the data payload.</p><h4 id="merge-resolution" tabindex="-1"><a class="header-anchor" href="#merge-resolution" aria-hidden="true">#</a> Merge Resolution</h4><p>As seen above the <code>data</code> property has a lot going on in the way of data merging, in the end, all of these are optional and the rightmost will win if a property exists in multiple objects</p><p>Config Data, Global Data, Flow Data, Payload Data ( payload data property always wins if provided</p><h3 id="domain-1" tabindex="-1"><a class="header-anchor" href="#domain-1" aria-hidden="true">#</a> domain</h3><ul><li>Type: <code>string</code></li></ul><p>Service domain to call</p><h3 id="service-1" tabindex="-1"><a class="header-anchor" href="#service-1" aria-hidden="true">#</a> service</h3><ul><li>Type: <code>string</code></li></ul><p>Service service to call</p><h3 id="data-1" tabindex="-1"><a class="header-anchor" href="#data-1" aria-hidden="true">#</a> data</h3><ul><li>Type: <code>JSON Object</code></li></ul><p>Service data to send with the service call</p><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target" aria-hidden="true">#</a> target</h3><ul><li>Type: <code>JSON Object with area_id, device_id, and entity_id as array properties</code></li></ul><p>Targets of the service call</p><h2 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h2><p>Value types:</p><ul><li><code>sent data</code>: data sent to Home Assistant</li><li><code>config</code>: config properties of the node</li></ul><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2>`,37),fe={href:"/node/call-service.md",target:"_blank",rel:"noopener noreferrer"},ge=t("External Docs");function me(be,ve){const o=n("ExternalLinkIcon"),i=n("Badge"),s=n("info-panel-only");return d(),r(c,null,[p,f,e("div",g,[m,e("p",null,[e("a",b,[v,a(o)])])]),y,e("h3",x,[q,w,a(i,{text:"required"})]),e("ul",null,[T,e("li",null,[S,e("a",k,[A,a(o)])])]),N,O,e("h3",C,[M,J,a(i,{text:"required"})]),e("ul",null,[D,e("li",null,[j,e("a",I,[E,a(o)])])]),B,V,F,e("ul",null,[H,e("li",null,[L,e("a",R,[W,a(o)]),G])]),P,Q,z,e("ul",null,[K,e("li",null,[U,e("a",X,[Y,a(o)]),Z])]),$,ee,te,e("ul",null,[ae,e("li",null,[oe,e("a",ne,[ie,a(o)]),se])]),de,re,e("ul",null,[le,e("li",null,[ce,e("a",he,[ue,a(o)]),_e])]),pe,a(s,null,{default:l(()=>[e("p",null,[e("a",fe,[ge,a(o)])])]),_:1})],64)}var qe=u(_,[["render",me]]);export{qe as default};
