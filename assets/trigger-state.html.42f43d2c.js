import{h as s,o as d,c as r,a as e,e as a,F as c,g as t,i}from"./app.7a8ebebe.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const u={},h=e("h1",{id:"trigger-state",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#trigger-state","aria-hidden":"true"},"#"),t(" Trigger: state")],-1),p=e("p",null,[t("Much like the "),e("code",null,"State Changed Node"),t(" however, provides some advanced functionality around common automation use cases.")],-1),_=e("p",null,[t("An advanced version of the "),e("code",null,"server:state-changed"),t(" node")],-1),g=e("h2",{id:"configuration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#"),t(" Configuration")],-1),f={id:"entity-id",tabindex:"-1"},b=e("a",{class:"header-anchor",href:"#entity-id","aria-hidden":"true"},"#",-1),y=t(" Entity ID "),m=e("li",null,[t("Type: "),e("code",null,"string")],-1),k=t("Accepts "),q={href:"/guide/mustache-templates.md",target:"_blank",rel:"noopener noreferrer"},x=t("Mustache Templates"),v=e("p",null,"The id of an entity to use for the comparison.",-1),T=e("p",null,[t("Custom ids can be inserted into the list by adding a "),e("code",null,"#"),t(" at the end of the id")],-1),w={id:"entity-id-filter-types",tabindex:"-1"},I=e("a",{class:"header-anchor",href:"#entity-id-filter-types","aria-hidden":"true"},"#",-1),C=t(" Entity ID Filter Types "),E=i('<ul><li>Type: <code>string</code></li><li>Values: <code>exact|list|substring|regex</code></li><li>Default: <code>exact</code></li></ul><h3 id="state-type" tabindex="-1"><a class="header-anchor" href="#state-type" aria-hidden="true">#</a> State Type</h3><ul><li>Type: <code>string</code></li><li>Values: <code>string|number|boolean</code></li><li>Default: <code>string</code></li></ul><p>Convert the state of the entity to the selected type. Boolean will be converted to true based on if the string is equal by default to (<code>y|yes|true|on|home|open</code>). Original value stored in msg.data.original_state</p><h3 id="conditions" tabindex="-1"><a class="header-anchor" href="#conditions" aria-hidden="true">#</a> Conditions</h3><p>This node has two default outputs &quot;allowed&quot; and &quot;blocked&quot;. If all the conditions are true the default message will be sent to the &quot;allowed&quot; output otherwise, it will be sent to the &quot;blocked&quot; output.</p><p><strong>See Also:</strong></p>',7),j={href:"/guide/conditionals.md",target:"_blank",rel:"noopener noreferrer"},A=t("Conditionals"),S=i(`<h3 id="custom-outputs" tabindex="-1"><a class="header-anchor" href="#custom-outputs" aria-hidden="true">#</a> Custom Outputs</h3><p>All the above conditions need to be true for any custom outputs to be sent, having zero conditions is a valid option. Each custom output can send the default message or a custom message. Also, each one can have its constraint on whether or not to be sent.</p><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h2><p>Input is disabled by default. It can be enabled using the <code>Enable Input</code> option.</p><h3 id="enable-disable" tabindex="-1"><a class="header-anchor" href="#enable-disable" aria-hidden="true">#</a> Enable / Disable</h3><ul><li>Type: <code>string</code></li></ul><p>If the incoming payload or message is a string and equal to <code>enable</code> or <code>disable</code> then set the node accordingly. Saves over restarts.</p><h3 id="output-initially" tabindex="-1"><a class="header-anchor" href="#output-initially" aria-hidden="true">#</a> Output Initially</h3><ul><li>Type: <code>boolean</code></li></ul><p>Output once on startup/deploy.</p><h2 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h2><h3 id="topic" tabindex="-1"><a class="header-anchor" href="#topic" aria-hidden="true">#</a> topic</h3><ul><li>Type: <code>string</code></li></ul><p>The entity_id that triggered the node</p><h3 id="payload" tabindex="-1"><a class="header-anchor" href="#payload" aria-hidden="true">#</a> payload</h3><ul><li>Type: <code>string</code></li></ul><p>The state as sent by home assistant</p><h3 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> data</h3><ul><li>Type: <code>object</code></li></ul><p>The original home assistant event containing <code>entity_id</code> <code>new_state</code> and <code>old_state</code> properties</p><h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h2><p>To test automation without having to manually change state in-home assistant send an input <code>payload</code> as an object which contains <code>entity_id</code>, <code>new_state</code>, and <code>old_state</code> properties. This will trigger the node as if the event came from Home Assistant.</p><div class="language-json ext-json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;entity_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test_entity&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;old_state&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;state&quot;</span><span class="token operator">:</span> <span class="token string">&quot;on&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;new_state&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;state&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2>`,24),B={href:"https://home-assistant.io/docs/configuration/state_object",target:"_blank",rel:"noopener noreferrer"},O=t("HA State Object");function V(D,N){const o=s("Badge"),n=s("ExternalLinkIcon");return d(),r(c,null,[h,p,_,g,e("h3",f,[b,y,a(o,{text:"required"})]),e("ul",null,[m,e("li",null,[k,e("a",q,[x,a(n)])])]),v,T,e("h3",w,[I,C,a(o,{text:"required"})]),E,e("ul",null,[e("li",null,[e("a",j,[A,a(n)])])]),S,e("ul",null,[e("li",null,[e("a",B,[O,a(n)])])])],64)}var L=l(u,[["render",V]]);export{L as default};
